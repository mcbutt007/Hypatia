/*
Hypatia: A realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing Group

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.TextView;

import com.google.common.base.Charsets;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnels;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.text.DateFormat;
import java.util.Date;
import java.util.concurrent.ConcurrentLinkedQueue;

class Database {

    private static TextView log = null;
    private static SharedPreferences prefs = null;
    private static File databasePath = null;
    private static boolean databaseFullyLoaded = false;
    private static boolean databaseCurrentlyLoading = false;

    public final static ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases = new ConcurrentLinkedQueue<>();
    public static BloomFilter<String> signaturesMD5 = null;
    public static BloomFilter<String> signaturesMD5Extended = null;
    public static BloomFilter<String> signaturesSHA1 = null;
    public static BloomFilter<String> signaturesSHA256 = null;
    public static long signaturesCount = 0;
    public static boolean changedDownload = false;
    public static boolean changedConfig = false;

    private static final DateFormat dateFormat = DateFormat.getDateInstance();

    private static final ConcurrentLinkedQueue<AsyncTask<?, ?, ?>> downloadFutures = new ConcurrentLinkedQueue<>();

    public Database(TextView log) {
        Database.log = log;
    }

    public static boolean areDatabasesAvailable() {
        return databasePath != null && databasePath.listFiles().length > 0 && signatureDatabases.size() > 0;
    }

    public static boolean isDatabaseLoaded() {
        return areDatabasesAvailable() && !isDatabaseLoading()
                && signaturesMD5 != null && signaturesMD5.approximateElementCount() > 0
                && signaturesSHA1 != null && signaturesSHA1.approximateElementCount() > 0
                && signaturesSHA256 != null && signaturesSHA256.approximateElementCount() > 0;
    }

    public static boolean isDatabaseLoading() {
        return !databaseFullyLoaded && databaseCurrentlyLoading;
    }

    public static boolean hasDownloadsRunning() {
        return downloadFutures.size() > 0;
    }

    public static void updateDatabase(Context context, ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases) {
        initDatabase(context);
        log.append(context.getString(R.string.main_database_updating, String.valueOf(signatureDatabases.size())) + "\n");
        if (!Utils.getDatabaseURL(context).equals(Utils.DATABASE_URL_DEFAULT)) {
            log.append(context.getString(R.string.main_database_override, Utils.getDatabaseURL(context)) + "\n");
        }
        changedDownload = false;
        boolean onionRouting = prefs.getBoolean("ONION_ROUTING", false);
        new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, Utils.getDatabaseURL(context) + "gpg.key", databasePath + "/gpg.key", Utils.getDatabaseURL(context));

        for (SignatureDatabase signatureDatabase : signatureDatabases) {
            new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, signatureDatabase.getUrl(), databasePath + "/" + signatureDatabase.getName(), signatureDatabase.getBaseUrl());
            new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, signatureDatabase.getUrl() + ".sig", databasePath + "/" + signatureDatabase.getName() + ".sig", signatureDatabase.getBaseUrl());
        }
    }

    private static void initDatabase(Context context) {
        databasePath = new File(context.getFilesDir() + "/signatures/");
        databasePath.mkdir();

        signatureDatabases.clear();
        prefs = context.getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE);
        String baseURL = Utils.getDatabaseURL(context);
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-md5-bloom.bin"));
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-sha1-bloom.bin"));
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-sha256-bloom.bin"));
        if (prefs.getBoolean("SIGNATURES_EXTENDED", false)) {
            signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-md5-extended-bloom.bin"));
        }
    }

    public static void loadDatabase(Context context, boolean forceReload, ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases) {
        if (isDatabaseLoaded() && !forceReload || databaseCurrentlyLoading) {
            return;
        }

        databaseFullyLoaded = false;
        databaseCurrentlyLoading = true;
        initDatabase(context);
        signaturesCount = 0;
        changedConfig = false;
        signaturesMD5Extended = null;

        File publicKey = new File(databasePath + "/gpg.key");
        GPGDetachedSignatureVerifier verifier = new GPGDetachedSignatureVerifier(Utils.getSigningKey(context));

        for (SignatureDatabase database : signatureDatabases) {
            if (!verifyAndLoadDatabase(database, publicKey, verifier)) {
                Log.w("Hypatia", "Failed to load database: " + database.getName());
                continue; // Skip to the next database if the current one fails to load
            }
        }

        System.gc(); // Perform garbage collection after loading all databases
        databaseFullyLoaded = true;
        databaseCurrentlyLoading = false;
    }

    // Extracted method to handle database verification and loading
    private static boolean verifyAndLoadDatabase(SignatureDatabase database, File publicKey, GPGDetachedSignatureVerifier verifier) {
        File databaseLocation = new File(databasePath + "/" + database.getName());
        File databaseSigLocation = new File(databasePath + "/" + database.getName() + ".sig");

        if (!publicKey.exists() || !databaseLocation.exists() || !databaseSigLocation.exists()) {
            return false;
        }

        try {
            boolean validated = verifier.verify(databaseLocation, databaseSigLocation, publicKey);
            if (!validated) {
                return false;
            }

            loadDatabaseFile(databaseLocation); // Extract the loading logic
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Extracted method for loading the database file based on its name
    private static void loadDatabaseFile(File databaseLocation) throws IOException {
        try (FileInputStream databaseLoading = new FileInputStream(databaseLocation)) {
            String databaseName = databaseLocation.getName();
            Log.d("Hypatia", "Processing " + databaseName);

            switch (databaseName) {
                case "hypatia-md5-bloom.bin":
                    signaturesMD5 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(Charsets.US_ASCII));
                    break;
                case "hypatia-sha1-bloom.bin":
                    signaturesSHA1 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(Charsets.US_ASCII));
                    break;
                case "hypatia-sha256-bloom.bin":
                    signaturesSHA256 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(Charsets.US_ASCII));
                    break;
                case "hypatia-md5-extended-bloom.bin":
                    signaturesMD5Extended = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(Charsets.US_ASCII));
                    break;
            }

            signaturesCount += getApproximateElementCount(databaseName); // Extract common logic
            Log.d("Hypatia", "Loaded " + databaseName);
        }
    }

    // Helper method to get the approximate element count based on database name
    private static long getApproximateElementCount(String databaseName) {
        switch (databaseName) {
            case "hypatia-md5-bloom.bin":
                return signaturesMD5.approximateElementCount();
            case "hypatia-sha1-bloom.bin":
                return signaturesSHA1.approximateElementCount();
            case "hypatia-sha256-bloom.bin":
                return signaturesSHA256.approximateElementCount();
            case "hypatia-md5-extended-bloom.bin":
                return signaturesMD5Extended.approximateElementCount();
            default:
                return 0;
        }
    }


    public static class Downloader extends AsyncTask<Object, String, String> {
        @Override
        protected void onPreExecute() {
            Database.downloadFutures.add(this);
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(String s) {
            Database.downloadFutures.remove(this);
            super.onPostExecute(s);
        }

        @Override
        protected String doInBackground(Object... objects) {
            boolean onionRouting = (boolean) objects[0];
            String url = (String) objects[1];
            File out = new File((String) objects[2]);
            File outNew = new File(objects[2] + ".new");
            String baseURL = (String) objects[3];
            try {
                if (outNew.exists()) {
                    outNew.delete();
                }
                HttpURLConnection connection;
                if (onionRouting) {
                    Utils.waitUntilOrbotIsAvailable();
                    Proxy orbot = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress("127.0.0.1", 9050));
                    connection = (HttpURLConnection) new URL(url).openConnection(orbot);
                } else {
                    connection = (HttpURLConnection) new URL(url).openConnection();
                }
                connection.setConnectTimeout(90000);
                connection.setReadTimeout(30000);
                connection.addRequestProperty("User-Agent", "Hypatia");
                String lastModifiedLocal = "";
                if (out.exists()) {
                    connection.setIfModifiedSince(out.lastModified());
                    lastModifiedLocal = Utils.getContext().getString(R.string.main_database_not_modified_since, dateFormat.format(new Date(out.lastModified())));
                }
                connection.connect();
                String lastModifiedServer = dateFormat.format(new Date(connection.getLastModified()));
                int res = connection.getResponseCode();
                if (res != 304) {
                    if (res == 200) {
                        FileOutputStream fileOutputStream = new FileOutputStream(outNew);

                        final byte[] data = new byte[1024];
                        int count;
                        while ((count = connection.getInputStream().read(data, 0, 1024)) != -1) {
                            fileOutputStream.write(data, 0, count);
                        }

                        fileOutputStream.close();
                        outNew.renameTo(out); //Move the new file into place
                        changedDownload = true;

                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_success)
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_released_on, lastModifiedServer) + "\n");
                    } else {
                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_error, String.valueOf(res)) + "\n");
                    }
                } else {
                    publishProgress(url.replaceAll(baseURL, "")
                            + "\n\t" + Utils.getContext().getString(R.string.main_database_not_changed) + " " + lastModifiedLocal + "\n");
                }
                connection.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                if (outNew.exists()) {
                    outNew.delete();
                }
                publishProgress(url.replaceAll(baseURL, "")
                        + "\n" + Utils.getContext().getString(R.string.main_database_download_error_logcat) + "\n");
            }
            return null;
        }

        @Override
        protected final void onProgressUpdate(String... progress) {
            log.append(progress[0] + "\n");
        }
    }

    public static boolean selfTest() {
        if (signaturesMD5 != null && signaturesSHA1 != null && signaturesSHA256 != null) {
            return signaturesMD5.mightContain("903616d0dbe074aa363d2d49c03f7362") //HypatiaHypatiaHypatia
                    && signaturesMD5.mightContain("faf325d9d4b2a6c9457405eb31870b22") //HypatiaHypatiaHypatia-MD5
                    && signaturesSHA1.mightContain("fc4a3e802894cc2229be77ec6f082d1aab744e54") //HypatiaHypatiaHypatia
                    && signaturesSHA1.mightContain("04445ab9332cdca0031184165eb88a0a9dcec4ed") //HypatiaHypatiaHypatia-SHA1
                    && signaturesSHA256.mightContain("df44844a0e99ddd935e8419257440a2ca7ef3243435a67416fcbb6cd3ae560c3") //HypatiaHypatiaHypatia
                    && signaturesSHA256.mightContain("3be403a831795482e82e2f9bc3e57ca34744aca3756e297b056b9f9c41830eaf"); //HypatiaHypatiaHypatia-SHA256
        }
        return false;
    }
}
