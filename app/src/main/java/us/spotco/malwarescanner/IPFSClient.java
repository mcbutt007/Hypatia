package us.spotco.malwarescanner;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.TextView;

import java.io.File;
import java.io.FileOutputStream;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.ipfs.api.IPFS;
import io.ipfs.cid.Cid;
import io.ipfs.multiaddr.MultiAddress;
import io.ipfs.multihash.Multihash;

class IPFSClient {
    private static TextView displayTextView;
    private static final DateFormat dateFormat = DateFormat.getDateInstance();
    private static File ipfsPath = null;
    public String ipfsGatewayUrl = "http://127.0.0.1:8080/ipfs/";


    public IPFSClient(TextView displayTextView) {
        this.displayTextView = displayTextView;
    }
    public Void UpdateDBUsingIPFS(Context context) {
        ipfsPath = new File(context.getFilesDir() + "/ipfs");
        ipfsPath.mkdir();

        HashMap<String, String> sig_cids = new HashMap<>();
        sig_cids.put("hypatia-md5-bloom.bin", "QmSq1WxNRv7dL1rzCZSZDPuzfpWHMr4LXea1qGqmoUhTi5");
        sig_cids.put("hypatia-sha1-bloom.bin", "QmauVEv3ZTkdUapwxCqs3X9rsGBLjUNKn6XtKJRAi6XsnH");
        sig_cids.put("hypatia-sha256-bloom.bin", "QmSXSQUJLZL7qvGke9vP7LYg6VyxxZDbYJv27BJeFARkZJ");

        for (Map.Entry<String, String> entry : sig_cids.entrySet()) {
            new IPFSGatewayDownloader().executeOnExecutor(Utils.getThreadPoolExecutor(), ipfsGatewayUrl + entry.getValue(), ipfsPath + "/" + entry.getKey(), ipfsGatewayUrl);
        }
        return null;
    }
    public static class IPFSGatewayDownloader extends AsyncTask<Object, String, String> {

        protected String doInBackground(Object... objects) {
            IPFS ipfs = new IPFS(new MultiAddress("/ip4/127.0.0.1/tcp/5001"));

            String url = (String) objects[0];
            File out = new File((String) objects[1]);
            File outNew = new File(objects[1] + ".new");
            String baseURL = (String) objects[2];
            try {
                if (outNew.exists()) {
                    outNew.delete();
                }
                HttpURLConnection connection;

                connection = (HttpURLConnection) new URL(url).openConnection();

                connection.setConnectTimeout(90000);
                connection.setReadTimeout(30000);
                connection.addRequestProperty("User-Agent", "Hypatia");
                String lastModifiedLocal = "";
                if (out.exists()) {
                    connection.setIfModifiedSince(out.lastModified());
                    lastModifiedLocal = Utils.getContext().getString(R.string.main_database_not_modified_since, dateFormat.format(new Date(out.lastModified())));
                }
                connection.connect();
                String lastModifiedServer = dateFormat.format(new Date(connection.getLastModified()));
                int res = connection.getResponseCode();
                if (res != 304) {
                    if (res == 200) {
                        FileOutputStream fileOutputStream = new FileOutputStream(outNew);

                        final byte[] data = new byte[1024];
                        int count;
                        while ((count = connection.getInputStream().read(data, 0, 1024)) != -1) {
                            fileOutputStream.write(data, 0, count);
                        }

                        fileOutputStream.close();
                        outNew.renameTo(out); //Move the new file into place

                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_success)
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_released_on, lastModifiedServer) + "\n");
                    } else {
                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_error, String.valueOf(res)) + "\n");
                    }
                } else {
                    publishProgress(url.replaceAll(baseURL, "")
                            + "\n\t" + Utils.getContext().getString(R.string.main_database_not_changed) + " " + lastModifiedLocal + "\n");
                }
                connection.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                if (outNew.exists()) {
                    outNew.delete();
                }
                publishProgress(url.replaceAll(baseURL, "")
                        + "\n" + Utils.getContext().getString(R.string.main_database_download_error_logcat) + "\n");
            }
            return null;
        }

        protected void onProgressUpdate(String... progress) {
            displayTextView.append(progress[0] + "\n");
        }
    }
}
