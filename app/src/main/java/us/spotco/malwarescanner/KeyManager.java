package us.spotco.malwarescanner;

import android.app.Activity;
import android.content.Context;
import android.security.KeyChain;
import android.security.KeyChainAliasCallback;
import android.security.KeyChainException;
import android.util.Log;

import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.Arrays;

import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class KeyManager {
    private Context context;

    public static void printTrustedOrganizations() {
        // Get ca.crt certificate
        TrustManagerFactory trustManagerFactory = null;
        try {
            trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        try {
            trustManagerFactory.init((KeyStore) null);
        } catch (KeyStoreException e) {
            throw new RuntimeException(e);
        }
        TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
        X509TrustManager x509TrustManager = (X509TrustManager) trustManagers[0];

        // Get the accepted issuers (Trusted CAs)
        X509Certificate[] acceptedIssuers = x509TrustManager.getAcceptedIssuers();

        for (X509Certificate cert : acceptedIssuers) {
            // Extract the SubjectX500Principal
            String subjectDN = cert.getSubjectX500Principal().getName();

            // Parse the Organization (O) field
            String organization = getOrganizationFromDN(subjectDN);

            if (organization != null) {
                System.out.println("Organization: " + organization);
            }
        }
    }
    public void selectCertificateAlias(Context context) {
        // Trigger the certificate selection
        KeyChain.choosePrivateKeyAlias((Activity) context, new KeyChainAliasCallback() {
            @Override
            public void alias(String alias) {
                if (alias != null) {
                    // Certificate selected, now retrieve it
                    retrieveCertificate(context,alias);
                }
            }
        }, null, null, null, -1, null);
    }
    private void retrieveCertificate(Context context, String alias) {
        try {
            X509Certificate[] certChain = KeyChain.getCertificateChain(context, alias);
            PrivateKey privateKey = KeyChain.getPrivateKey(context, alias);

            if (certChain != null && privateKey != null) {
                // Use the certificate and private key
                Log.d("KeyStoreTest", "Certificate: " + Arrays.hashCode(certChain));
            }
        } catch (KeyChainException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Method to parse the Organization (O) field from the DN string
    private static String getOrganizationFromDN(String dn) {
        String[] dnParts = dn.split(",");
        for (String part : dnParts) {
            part = part.trim();
            if (part.startsWith("O=")) {
                return part.substring(2);
            }
        }
        return null;
    }
}
