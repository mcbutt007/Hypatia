/*
Hypatia: A realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing Group

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import static android.os.Build.VERSION.SDK_INT;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.PowerManager;
import android.provider.Settings;
import android.text.InputType;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.util.HashSet;

public class MainActivity extends Activity {

    private SharedPreferences prefs = null;
    private MalwareScanner malwareScanner = null;

    private TextView logView;
    private Menu menu;

    private static final String buildVersionName = BuildConfig.VERSION_NAME;

    private boolean scanSystem = false;
    private boolean scanApps = true;
    private boolean scanInternal = true;
    private boolean scanExternal = false;

    private static final int REQUEST_PERMISSION_EXTERNAL_STORAGE = 0;

    @Override
    protected final void onCreate(Bundle savedInstanceState) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            setTheme(android.R.style.Theme_DeviceDefault_DayNight);
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
        }
        super.onCreate(savedInstanceState);
        Utils.setContext(getApplicationContext());
        setContentView(R.layout.content_main);

        logView = findViewById(R.id.txtLogOutput);
        logView.setMovementMethod(new ScrollingMovementMethod());
        logView.setTextIsSelectable(true);

        logView.append(getString(R.string.app_copyright) + "\n");
        logView.append(getString(R.string.app_license) + "\n");
        logView.append(getString(R.string.app_version, buildVersionName) + "\n");
        logView.append(getString(R.string.app_db_type_clamav) + "\n\n");

        malwareScanner = new MalwareScanner(this, this, true);

        prefs = getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE);

        requestPermissions();

        Utils.considerStartService(this);
    }

    @Override
    public final boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        this.menu = menu;
        menu.findItem(R.id.toggleRealtime).setChecked(Utils.isServiceRunning(MalwareScannerService.class, this));
        menu.findItem(R.id.toggleOnionRouting).setChecked(prefs.getBoolean("ONION_ROUTING", false));
        menu.findItem(R.id.mnuUseIPFS).setChecked(prefs.getBoolean("USE_IPFS", false));
        updateScanButton(false);
        return true;
    }

    private void requestPermissions() {
        if (SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_EXTERNAL_STORAGE);
            }
            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSION_EXTERNAL_STORAGE);
            }
        }
        if (SDK_INT >= Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                Uri uri = Uri.fromParts("package", getPackageName(), null);
                intent.setData(uri);
                startActivity(intent);
            }
        }
    }

    private void showCredits() {
        Dialog creditsDialog;
        AlertDialog.Builder creditsBuilder = new AlertDialog.Builder(this);
        creditsBuilder.setTitle(getString(R.string.lblFullCredits));
        creditsBuilder.setItems(R.array.fullCredits, (dialog, which) -> {
            //do nothing
        });
        creditsDialog = creditsBuilder.create();
        creditsDialog.show();
    }

    @Override
    public final boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.toggleOnionRouting:
                if (!item.isChecked()) {
                    if (Utils.isOrbotInstalled(this)) {
                        prefs.edit().putBoolean("ONION_ROUTING", !item.isChecked()).apply();
                        item.setChecked(true);
                    } else {
                        prefs.edit().putBoolean("ONION_ROUTING", false).apply();
                        item.setChecked(false);
                        Toast.makeText(this, R.string.lblOnionRoutingNotInstalled, Toast.LENGTH_SHORT).show();
                    }
                } else {
                    prefs.edit().putBoolean("ONION_ROUTING", false).apply();
                    item.setChecked(false);
                }
                break;
            case R.id.mnuUpdateDatabase:
                if (Database.hasDownloadsRunning()) {
                    logView.append(getString(R.string.lblUpdateRunning) + "\n");
                } else if (malwareScanner.running) {
                    logView.append(getString(R.string.lblScanRunning) + "\n");
                } else if (!Utils.isNetworkAvailable(this)) {
                    logView.append(getString(R.string.lblNoNetwork) + "\n");
                } else if (Database.isDatabaseLoading()) {
                    logView.append(getString(R.string.lblDatabaseLoading) + "\n");
                } else if (Utils.isConnectionMetered(this)) {
                    int amt = prefs.getBoolean("SIGNATURES_EXTENDED", false) ? 200 : 50;
                    new AlertDialog.Builder(this)
                            .setTitle(R.string.confirm_update_title)
                            .setMessage(getString(R.string.confirm_update_summary, String.valueOf(amt)))
                            .setIcon(android.R.drawable.ic_dialog_alert)
                            .setPositiveButton(getString(android.R.string.yes), (dialog, which) -> {
                                updateDatabase();
                            })
                            .setNegativeButton(getString(android.R.string.no), (dialog, which) -> {
                                dialog.cancel();
                            }).show();
                } else {
                    updateDatabase();
                }
                break;
            case R.id.mnuDatabaseServer:
                if (Database.hasDownloadsRunning()) {
                    logView.append(getString(R.string.lblUpdateRunning) + "\n");
                } else if (Database.isDatabaseLoading()) {
                    logView.append(getString(R.string.lblDatabaseLoading) + "\n");
                } else {
                    AlertDialog.Builder builderServerOverride = new AlertDialog.Builder(this);
                    builderServerOverride.setTitle(getString(R.string.lblDatabaseServer));
                    final EditText inputServerOverride = new EditText(this);
                    inputServerOverride.setInputType(InputType.TYPE_CLASS_TEXT);
                    inputServerOverride.setText(Utils.getDatabaseURL(this));
                    builderServerOverride.setView(inputServerOverride);
                    builderServerOverride.setPositiveButton(getString(R.string.lblOverride), (dialog, which) -> {
                        String newServer = inputServerOverride.getText().toString();
                        if (!newServer.endsWith("/")) {
                            newServer += "/";
                        }
                        prefs.edit().putString("DATABASE_SERVER", newServer).apply();
                    });
                    builderServerOverride.setNegativeButton(getString(R.string.lblReset), (dialog, which) -> {
                        prefs.edit().putString("DATABASE_SERVER", Utils.DATABASE_URL_DEFAULT).apply();
                        dialog.cancel();
                    });
                    builderServerOverride.show();
                }
                break;
            case R.id.mnuSigningKey:
                if (Database.hasDownloadsRunning()) {
                    logView.append(getString(R.string.lblUpdateRunning) + "\n");
                } else if (Database.isDatabaseLoading()) {
                    logView.append(getString(R.string.lblDatabaseLoading) + "\n");
                } else {
                    AlertDialog.Builder builderKey = new AlertDialog.Builder(this);
                    builderKey.setTitle(getString(R.string.lblSigningKey));
                    final EditText inputKey = new EditText(this);
                    inputKey.setInputType(InputType.TYPE_CLASS_TEXT);
                    inputKey.setText(Utils.getSigningKey(this));
                    builderKey.setView(inputKey);
                    builderKey.setPositiveButton(getString(R.string.lblOverride), (dialog, which) -> prefs.edit().putString("SIGNING_KEY", inputKey.getText().toString()).apply());
                    builderKey.setNegativeButton(getString(R.string.lblReset), (dialog, which) -> {
                        prefs.edit().putString("SIGNING_KEY", Utils.SIGNING_KEY_DEFAULT).apply();
                        dialog.cancel();
                    });
                    builderKey.show();
                }
                break;
            case R.id.toggleExtended:
                if (Database.hasDownloadsRunning()) {
                    logView.append(getString(R.string.lblUpdateRunning) + "\n");
                } else if (Database.isDatabaseLoading()) {
                    logView.append(getString(R.string.lblDatabaseLoading) + "\n");
                } else {
                    boolean prevExtended = prefs.getBoolean("SIGNATURES_EXTENDED", false);
                    new AlertDialog.Builder(this)
                            .setTitle(R.string.confirm_extended_title)
                            .setMessage(getString(R.string.confirm_extended_summary))
                            .setIcon(android.R.drawable.ic_menu_compass)
                            .setPositiveButton(getString(android.R.string.yes), (dialog, which) -> {
                                prefs.edit().putBoolean("SIGNATURES_EXTENDED", true).apply();
                                if (!prevExtended) {
                                    Database.changedConfig = true;
                                }
                            })
                            .setNegativeButton(getString(android.R.string.no), (dialog, which) -> {
                                prefs.edit().putBoolean("SIGNATURES_EXTENDED", false).apply();
                                if (prevExtended) {
                                    Database.changedConfig = true;
                                }
                                dialog.cancel();
                            }).show();
                }
                break;
            case R.id.toggleRealtime:
                if (malwareScanner.running) {
                    logView.append(getString(R.string.lblScanRunning) + "\n");
                } else {
                    Intent realtimeScanner = new Intent(getApplicationContext(), MalwareScannerService.class);
                    if (!item.isChecked()) {
                        prefs.edit().putBoolean("autostart", true).apply();
                        Utils.considerStartService(this);
                    } else {
                        stopService(realtimeScanner);
                        prefs.edit().putBoolean("autostart", false).apply();
                    }
                    item.setChecked(!item.isChecked());
                }
                break;
            case R.id.mnuScanSystem:
                scanSystem = !item.isChecked();
                item.setChecked(scanSystem);
                break;
            case R.id.mnuUseIPFS:
                if (!item.isChecked()) {
                    item.setChecked(true);
                    prefs.edit().putBoolean("USE_IPFS", true).apply();
                    IPFSClient ipfsClient = new IPFSClient(logView);
                    ipfsClient.UpdateDBUsingIPFS(this);
                } else {
                    prefs.edit().putBoolean("USE_IPFS", false).apply();
                    item.setChecked(false);
                }
                break;
            case R.id.mnuUseBlockchain:
                try {
                    new LedgerController().handleGateway(MainActivity.this, logView);
                } catch (Exception e) {
                    Log.e("Blockchain", "Error occurred", e);
                }
                break;
            case R.id.mnuScanApps:
                scanApps = !item.isChecked();
                item.setChecked(scanApps);
                break;
            case R.id.mnuScanInternal:
                scanInternal = !item.isChecked();
                item.setChecked(scanInternal);
                break;
            case R.id.mnuScanExternal:
                scanExternal = !item.isChecked();
                item.setChecked(scanExternal);
                break;
            case R.id.mnuSelfTestReal:
                Utils.writeSelfTestFiles(this);
                break;
            case R.id.mnuFullCredits:
                showCredits();
                break;
            case R.id.btnStartScan:
                if (!malwareScanner.running) {
                    if (Database.hasDownloadsRunning()) {
                        logView.append(getString(R.string.lblUpdateRunning) + "\n");
                    } else if (Database.isDatabaseLoading()) {
                        logView.append(getString(R.string.lblDatabaseLoading) + "\n");
                    } else {
                        updateScanButton(true);
                        startScanner();
                    }
                } else {
                    logView.append("\n" + getString(R.string.main_cancelling_scan) + "\n\n");
                    malwareScanner.cancel(true);
                    malwareScanner.running = false;
                }
        }
        return super.onOptionsItemSelected(item);
    }

    private void startScanner() {
        malwareScanner = new MalwareScanner(this, this, true);
        malwareScanner.running = true;
        HashSet<File> filesToScan = new HashSet<>();
        if (scanSystem) {
            filesToScan.add(Environment.getRootDirectory());
            filesToScan.add(new File("/"));
            filesToScan.add(new File("/apex"));
            filesToScan.add(new File("/cache"));
            filesToScan.add(new File("/data"));
            filesToScan.add(new File("/data/local/tmp"));
            filesToScan.add(new File("/firmware"));
            filesToScan.add(new File("/oem"));
            filesToScan.add(new File("/odm"));
            filesToScan.add(new File("/odm_dlkm"));
            filesToScan.add(new File("/product"));
            filesToScan.add(new File("/system"));
            filesToScan.add(new File("/system_dlkm"));
            filesToScan.add(new File("/vendor"));
            filesToScan.add(new File("/vendor_dlkm"));
        }
        if (scanApps) {
            for (ApplicationInfo packageInfo : getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA)) {
                if (packageInfo != null) {
                    if (packageInfo.sourceDir != null) {
                        filesToScan.add(new File(packageInfo.sourceDir));
                    }
                    if (packageInfo.dataDir != null) {
                        filesToScan.add(new File(packageInfo.dataDir));
                    }
                    if (packageInfo.nativeLibraryDir != null) {
                        filesToScan.add(new File(packageInfo.nativeLibraryDir));
                    }
                    if (packageInfo.publicSourceDir != null) {
                        filesToScan.add(new File(packageInfo.publicSourceDir));
                    }
                }
            }
        }
        if (scanInternal) {
            if (Environment.getExternalStorageDirectory() != null) {
                filesToScan.add(Environment.getExternalStorageDirectory());
            }
        }
        if (scanExternal) {
            File externalStorage = new File("/storage");
            if (externalStorage.exists()) {
                filesToScan.add(externalStorage);
            }
        }

        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Hypatia::ManualScanLock");
        wakeLock.acquire(10 * 60 * 1000L); /* 10 minutes */
        malwareScanner.executeOnExecutor(Utils.getThreadPoolExecutor(), filesToScan);
        new Thread(() -> {
            try {
                while (malwareScanner.running) {
                    Thread.sleep(500);
                }
                runOnUiThread(() -> updateScanButton(false));
                wakeLock.release();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void updateDatabase() {
        if (prefs.getBoolean("ONION_ROUTING", false)) {
            Utils.requestStartOrbot(this);
            logView.append(getString(R.string.lblOnionRoutingEnabledHint) + "\n");
        }
        new Database(findViewById(R.id.txtLogOutput));
        if (!Database.isDatabaseLoading()) {
            PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
            PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Hypatia::UpdateLock");
            wakeLock.acquire(3 * 60 * 1000L); /* 3 minutes */
            Database.updateDatabase(this, Database.signatureDatabases);
            Utils.getThreadPoolExecutor().execute(() -> {
                try {
                    Thread.sleep(500);
                    Log.d("Hypatia", "Considering database reload!");
                    while (Database.hasDownloadsRunning()) {
                        Thread.sleep(500);
                        Log.d("Hypatia", "Download in progress, waiting!");
                    }
                    wakeLock.release();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                runOnUiThread(() -> logView.append(getString(R.string.lblDatabasesUpdated) + "\n"));
                if (Database.isDatabaseLoaded()) {
                    if (Database.changedDownload || Database.changedConfig) {
                        Log.d("Hypatia", "Really reloading database!");
                        Database.loadDatabase(getApplicationContext(), true, Database.signatureDatabases);
                    } else {
                        Log.d("Hypatia", "Database not changed, skipping reload!");
                    }
                } else {
                    Log.d("Hypatia", "Database not loaded, skipping reload!");
                }
            });
        } else {
            logView.append(getString(R.string.lblDatabaseLoading) + "\n");
        }
    }

    private void updateScanButton(boolean running) {
        if (menu == null || menu.findItem(R.id.btnStartScan) == null) {
            return;
        }
        if (running) {
            if (SDK_INT >= Build.VERSION_CODES.O) {
                menu.findItem(R.id.btnStartScan).setIconTintList(getColorStateList(R.color.colorRed));
            }
            if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                menu.findItem(R.id.btnStartScan).setIcon(getDrawable(android.R.drawable.ic_menu_close_clear_cancel));
            }
        } else {
            if (SDK_INT >= Build.VERSION_CODES.O) {
                menu.findItem(R.id.btnStartScan).setIconTintList(getColorStateList(R.color.colorGreen));
            }
            if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                menu.findItem(R.id.btnStartScan).setIcon(getDrawable(android.R.drawable.ic_media_play));
            }
        }
    }

}
